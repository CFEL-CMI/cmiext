#!/usr/bin/env python
# -*- coding: utf-8; fill-column: 120 -*-
#
# This file is part of JK Python extensions
# Copyright (C) 2009 Jochen Küpper <software@jochen-kuepper.de>
#
# This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# If you use this programm for scientific work, you must correctly reference it; see LICENSE file for details.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with this program. If not, see
# <http://www.gnu.org/licenses/>.
#
# some SGE commands for batch usage convenience
#$ -cwd
#$ -e $JOB_NAME.sge
#$ -o $JOB_NAME.sge
#$ -S $HOME/.python/bin/python
#$ -V
from __future__ import division

"""Plot adiabatic energy curves from HDF5 files to matplotlib graph

Copyright (C) 2009 Jochen Küpper"""

__author__ = "Jochen Küpper <software@jochen-kuepper.de>"

import numpy as num
import getopt, sys
import matplotlib.pyplot as plt

import jkext.molecule as molecule
from jkext.convert import *
from jkext.state import State
import jkext.starkeffect as starkeffect


def usage():
    # ToDo implement a useful usage description
    print "See script for details"

def test(Ka,plotK):
    if plotK == True or (plotK == False and Ka == 0):
        return True
    else:
        return False
    
def main(args):
    try:
        opts, args = getopt.getopt(args[1:], "h", ["help", "Jmin=", "Jmax=", "lin", "plotDC", "plotAC"])
    except getopt.GetoptError, err:
        # print help information and exit:
        print str(err) # will print something like "option -a not recognized"
        usage()
        sys.exit(2)
    # default values
    Jmin = 0
    Jmax = 2
    plotK = True
    plotAC = False
    plotDC = False
    # scan commandline
    for o, a in opts:
        if o in ("-h", "--help"):
            usage()
            sys.exit()
        elif o == "--Jmin":
            Jmin = int(a)
        elif o == "--Jmax":
            Jmax = int(a)
        elif o == "--lin":
            plotK = False
        elif o == "--plotDC":
            plotDC = True
        elif o == "--plotAC":
            plotAC = True
        else:
            assert False, "unhandled commandline option"
    # loop over all remaining arguments -- asumming its filenames of HDF5 Stark-files
    colors = ['black', 'blue', 'red', 'green']
    colorindex = 0
    for name in args:
        colorindex += 1
        if colorindex > len(colors): colorindex = 0
        color = colors[colorindex]
        # create Molecule object and specify storage file
        param = starkeffect.CalculationParameter
        mol = molecule.Molecule(storage=name)
        mol.getparam(param)
        # plot energies
        assert plotAC == True or plotDC == True
        if plotDC:
            plt.figure(1)
            plt.xlabel(r'DC field [kV/cm]')
            plt.ylabel(r'Energy [MHz]')
            for J in range(Jmin, Jmax+1):
                for M in range(0, J+1):
                    Ka = 0
                    for Kc in range(J, -1, -1):
                        state = State(J, Ka, Kc, M, 0)
                        dcfields, energies, acfields = mol.starkeffect(state)
                        if len(acfields)>1: # we only want the ac field free states right now
                            energies=energies[:,0]
                        if test(Ka,plotK):
                            plt.plot(V_m2kV_cm(dcfields), J2Hz(energies) / 1e6, color)
                        if Kc > 0:
                            Ka += 1
                            state = State(J, Ka, Kc, M, 0)
                            dcfields, energies, acfields = mol.starkeffect(state)
                            if len(acfields)>1: # we only want the ac field free states
                                energies=energies[:,0]
                            if test(Ka,plotK):
                                plt.plot(V_m2kV_cm(dcfields), J2Hz(energies) / 1e6, color)
            plt.figure(2)
            plt.xlabel(r'DC field [kV/cm]')
            plt.ylabel(r'Effective dipole moment')
            # plot effective dipole moment
            for J in range(Jmin, Jmax+1):
                for M in range(0, J+1):
                    Ka = 0
                    for Kc in range(J, -1, -1):
                        state = State(J, Ka, Kc, M, 0)
                        dcfields, mueff = mol.mueff(state)
                        if test(Ka,plotK):
                            plt.plot(V_m2kV_cm(dcfields), J2Hz(mueff) / 1e6 / V_m2kV_cm(1), color)
                        if Kc > 0:
                            Ka += 1
                            state = State(J, Ka, Kc, M, 0)
                            dcfields, mueff = mol.mueff(state)
                            if test(Ka,plotK):
                                plt.plot(V_m2kV_cm(dcfields), J2Hz(mueff) / 1e6 / V_m2kV_cm(1), color)
            plt.figure(3)
            plt.xlabel(r'$\omega$')
            plt.ylabel(r'$\cos\theta$')
            for J in range(Jmin, Jmax+1):
                for M in range(0,J+1):
                    Ka = 0
                    for Kc in range(J, -1, -1):
                        state = State(J, Ka, Kc, M, 0)
                        dcfields, coshellmann = mol.coshellmann(state,param)
                        omega=dcfields2omega(dcfields,param.rotcon[1],param.dipole[0])
                        if test(Ka,plotK):
                            plt.plot(omega, coshellmann, color)
                        if Kc > 0:
                            Ka += 1
                            state = State(J, Ka, Kc, M, 0)
                            dcfields, coshellmann = mol.coshellmann(state,param)
                            omega=dcfields2omega(dcfields,param.rotcon[1],param.dipole[0])
                            if test(Ka,plotK):
                                plt.plot(omega, coshellmann, color)
        # ac energies
        if plotAC:
            plt.figure(4)
            plt.xlabel(r'$\Delta\omega$')
            plt.ylabel(r'$E/B$')
            for J in range(Jmin, Jmax+1):
                for M in range(0,J+1):
                    Ka = 0
                    for Kc in range(J, -1, -1):
                        state = State(J, Ka, Kc, M, 0)
                        dcfields, energies, acfields = mol.starkeffect(state)
                        deltaomega=acfields2deltaomega(acfields,param.rotcon[1],param.polarizability[0][0])
                        energies=energies[0,:] # we only want the dc field free states
                        if test(Ka,plotK):
                            plt.plot(deltaomega, energies/param.rotcon[1], color)
                        if Kc > 0:
                            Ka += 1
                            state = State(J, Ka, Kc, M, 0)
                            dcfields, energies, acfields = mol.starkeffect(state)
                            deltaomega=acfields2deltaomega(acfields,param.rotcon[1],param.polarizability[0][0])
                            energies=energies[0,:] # we only want the dc field free states
                            if test(Ka,plotK):
                                plt.plot(deltaomega, energies/param.rotcon[1], color)
        
        # plot cos2
            plt.figure(5)
            plt.xlabel(r'$\Delta\omega$')
            plt.ylabel(r'$\cos^2\theta$')
            for J in range(Jmin, Jmax+1):
                for M in range(0,J+1):
                    Ka = 0
                    for Kc in range(J, -1, -1):
                        state = State(J, Ka, Kc, M, 0)
                        acfields, cos2 = mol.cos2hellmann(state,param)
                        deltaomega=acfields2deltaomega(acfields,param.rotcon[1],param.polarizability[0][0])
                        if test(Ka,plotK):
                            plt.plot(deltaomega, cos2 , color)
                        if Kc > 0:
                            Ka += 1
                            state = State(J, Ka, Kc, M, 0)
                            acfields, cos2 = mol.cos2hellmann(state,param)
                            deltaomega=acfields2deltaomega(acfields,param.rotcon[1],param.polarizability[0][0])
                            if test(Ka,plotK):
                                plt.plot(deltaomega,cos2, color)
    plt.show()


if __name__ == "__main__":
    main(sys.argv)
